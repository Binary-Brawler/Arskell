if status is-interactive
    # Commands to run in interactive sessions can go here
end

function firstRun
    dconf load /org/mate/ < /MateConfig
    sleep 1
    sudo systemctl start dhcpcd
    sleep 20

    set -l eth (ip link show | grep -E 'en[[:alnum:]]' | grep 'state UP')

    set -l wifi (ip link show | grep -E 'wl[[:alnum:]]' | grep 'state UP')

    if test -z "$eth" -a -z "$wifi"
        echo "No active Ethernet or WiFi connection found. Please connect to a network and try again."
        return 1
    end

    sudo pacman -Syu --noconfirm
    curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
end

function startUp
	sudo systemctl start dhcpcd
    sleep 15
    sudo pacman -Syu --noconfirm
end

function rebuild
    cabal clean && cabal build
end

function record
	ffmpeg -f x11grab -video_size 1920x1080 -framerate 25 -i $DISPLAY -c:v ffvhuff $argv
end

function newHasky
    # Check if arguments are provided
    if test (count $argv) -lt 2
        echo "Usage: newHasky <--lib|--exe> <project-name>"
        return 1
    end

    set project_type $argv[1]
    set project_name $argv[2]
    set project_dir (realpath $project_name)

    # Create project directory
    mkdir -p $project_dir
    cd $project_dir

    # Create README.md
    echo "# $project_name" > README.md

    # Create LICENSE (default to MIT license)
    echo "MIT License" > LICENSE

    # Create .gitignore
    echo "/dist-newstyle/" > .gitignore

    # Start creating the .cabal file based on the project type
    echo "cabal-version:  3.0
name:           $project_name
version:        0.1.0.0
license:        MIT
build-type:     Simple" > "$project_name.cabal"

    if test "$project_type" = "--lib"
        # Create library and test suite entries
        echo "
library
  exposed-modules:
      Lib
  hs-source-dirs:
      src
  build-depends:
      base >= 3 && < 7
  default-language: Haskell2010

test-suite test-bs
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Test.hs
  build-depends:       base >= 3 && < 7
                     , QuickCheck >= 2.11
                     , $project_name
  default-language: Haskell2010" >> "$project_name.cabal"

        # Create source and test directories
        mkdir -p src/ test/

        # Create Lib.hs in src directory
        echo "module Lib
    ( someFunc
    ) where

someFunc :: IO ()
someFunc = putStrLn \"Project Setup!\"" > src/Lib.hs

        # Create test suite
        echo "import Test.QuickCheck
import Lib (someFunc)

main :: IO ()
main = putStrLn \"Test suite not yet implemented\"" > test/Test.hs

    else if test "$project_type" = "--exe"
        # Create executable entry
        echo "
executable $project_name
  hs-source-dirs:  .
  main-is:         Main.hs
  build-depends:   base >= 3 && < 7
  default-language: Haskell2010" >> "$project_name.cabal"

        # Create Main.hs in the current directory
        echo "module Main where

main :: IO ()
main = putStrLn \"Hello, Haskell!\"" > Main.hs

    else
        echo "Invalid option: $project_type. Use --lib or --exe."
        return 1
    end

    # Build and run the project
    cabal build > /dev/null 2>&1
    if test "$project_type" = "--exe"
        cabal run $project_name
    end
    cabal test

    echo "Created new Haskell project '$project_name' in $project_dir"
end

function newPy 
    if test -z $argv[1]
        echo "Usage: newPy <project-name>"
        return 1
    end
  
    set py_name $argv[1]
    set py_dir (realpath $py_name)

    mkdir -p $py_dir
    cd $py_dir

    mkdir -p tests/ app/  

    echo "# $py_name" > README.md

    echo "#!/usr/bin/env python3" > setup.py

    echo "#!/usr/bin/env python3" > app/__init__.py

    echo "#!/usr/bin/env python3" > app/__main__.py

    echo "#!/usr/bin/env python3" > utils.py

    echo "Created new Python project '$py_name' in $py_dir"
end

set PATH $HOME/.local/bin $PATH

set -q GHCUP_INSTALL_BASE_PREFIX[1]; or set GHCUP_INSTALL_BASE_PREFIX $HOME ; set -gx PATH $HOME/.cabal/bin $PATH $HOME/.ghcup/bin
